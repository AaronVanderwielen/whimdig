function initSchema(m) {
	// validation messages
	var valMsg = {
		required: '{PATH} is required!',
		enum: 'enum validator failed for path `{PATH}` with value `{VALUE}`'
	}

	// complexType
	var location = {
		type: {},
		required: valMsg.required
	};
	var messageSchema = new m.Schema({
		date: Date,
		facebook_id: String,
		text: String
	});

	// enums
	var intensityVariable = {
		values: 'start end'.split(' '),
		message: valMsg.enum
	};
	var privacy = {
		values: 'public private'.split(' '),
		message: valMsg.enum
	}
	var tagGlyph = {
		values: 'music beer cutlery dog playing_dices book gamepad soccer_ball birthday_cake film'.split(' '),
		message: valMsg.enum
	};

	var eventSchema = new m.Schema({
		//_id: m.Schema.Types.ObjectId,
		name: { type: String, required: valMsg.required },
		loc: location,//{ type: location, required: valMsg.required },
		desc: { type: String, required: valMsg.required },
		tags: [{ type: m.Schema.Types.ObjectId, required: valMsg.required, ref: 'Tag' }],
		place: { type: m.Schema.Types.ObjectId, required: valMsg.required, ref: 'Place' },
		start: { type: Date, required: valMsg.required },
		end: { type: Date, required: valMsg.required },
		privacy: { type: String, required: valMsg.required },
		intensity_variable: { type: String, enum: intensityVariable, required: valMsg.enum },
		created_by: { type: m.Schema.Types.ObjectId, required: valMsg.required },
		users: [String],
		invited: [String],
		messages: [messageSchema]
	});

	var placeSchema = new m.Schema({
		//_id: m.Schema.Types.ObjectId,
		place_id: { type: String, required: valMsg.required },
		name: { type: String, required: valMsg.required },
		loc: location,
		vicinity: { type: String, required: valMsg.required },
	});

	var tagSchema = new m.Schema({
		//_id: m.Schema.Types.ObjectId,
		glyph: { type: String, enum: tagGlyph, required: valMsg.required },
		label: { type: String, required: valMsg.required }
	});

	var userSchema = new m.Schema({
		//_id: m.Schema.Types.ObjectId,
		facebook_id: { type: String, required: valMsg.required },
		first_name: String,
		last_name: String,
		friends: [String],
		admin: Boolean,
		last_login: Date,
		places: [{ type: m.Schema.Types.ObjectId, ref: 'Place' }]
	});

	var Event = m.model('Event', eventSchema);
	Event.schema.path('tags').validate(function (value) {
		return value.length > 0;
	}, 'Please select some event tags');

	var Place = m.model('Place', placeSchema);
	var Tag = m.model('Tag', tagSchema);
	var User = m.model('User', userSchema);

	return {
		event: Event,
		place: Place,
		tag: Tag,
		user: User
	};
}

module.exports = function (mongoose) {
	var schema = initSchema(mongoose);
	return schema;
};