var ControllerData = function (businessLogic) {
	var bl = businessLogic,
		logJson = function (json) {
			console.log(JSON.stringify(json, null, 2));
		},
		jsonResponse = function (success, body, status) {
			return {
				success: success,
				body: body,
				statusCode: success ? 200 : status
			};
		};

	return [
		// main
		{
			name: "main",
			route: "",
			actions: {
				get: {
					index: {
						method: function (req, res) {
							res.render("index");
						}
					}
					// init: {
						// method: function (req, res) {
							// bl.insertFilters(function() {
								// res.render("index");
							// });
						// }
					// }
				},
				post: {}
			}
		},
		// event
		{
			name: "event",
			route: "/event",
			actions: {
				get: {
					index: {
						authenticate: true,
						method: function (req, res) {
							bl.getEvent(req.session.user.facebook_id, req.query.eventId, function (response) {
								res.json(response);
							});
						}
					},
					list: {
						authenticate: true,
						method: function (req, res) {
							bl.getAllEvents(req.session.user.facebook_id, function (response) {
								res.json(response);
							});
						}
					},
					span: {
						authenticate: true,
						method: function (req, res) {
							bl.getEventsForSpan(req.query.span, req.query.filters, req.query.bounds, req.session.user.facebook_id, function (response) {
								res.json(response);
							});
						}
					},
					userEvents: {
						authenticate: true,
						method: function (req, res) {
							bl.getUserEvents(req.session.user.facebook_id, function (response) {
								res.json(response);
							});
						}
					},
					userOwnedEvents: {
						authenticate: true,
						method: function (req, res) {
							bl.getUserOwnedEvents(req.session.user._id, function (response) {
								res.json(response);
							});
						}
					},
					userPastEvents: {
						authenticate: true,
						method: function (req, res) {
							bl.getUserPastEvents(req.session.user.facebook_id, function (response) {
								res.json(response);
							});
						}
					},
					tags: {
						authenticate: true,
						method: function (req, res) {
							bl.getAllTags(function (response) {
								res.json(response);
							});
						}
					}
				},
				post: {
					create: {
						authenticate: true,
						method: function (req, res) {
							bl.createEvent(req.body, req.session.user, function (response) {
								res.json(new jsonResponse(response.success, response.body));
							});
						}
					},
					update: {
						authenticate: true,
						method: function (req, res) {
							bl.updateEvent(req.body, req.session.user, function (response) {
								res.json(response);
							});
						}
					},
					remove: {
						authenticate: true,
						method: function (req, res) {
							bl.deleteEvent(req.body.eventId, req.session.user._id, function (response) {
								res.json(response);
							});
						}
					},
					addUser: {
						authenticate: true,
						method: function (req, res) {
							if (req.body.eventId) {
								bl.addUserToEvent(req.session.user.facebook_id, req.body.eventId, function (event) {
									if (event) {
										res.json(new jsonResponse(true, event));
									}
									else {
										res.json(new jsonResponse(false, "Could not add user to event"));
									}
								});
							}
						}
					},
					removeUser: {
						authenticate: true,
						method: function (req, res) {
							if (req.body.eventId) {
								bl.removeUserFromEvent(req.session.user.facebook_id, req.body.eventId, function (event) {
									if (event) {
										res.json(new jsonResponse(true, event));
									}
									else {
										res.json(new jsonResponse(false, "Could not remove user to event"));
									}
								});
							}
						}
					},
					review: {
						authenticate: true,
						method: function (req, res) {
							bl.createReview(req.session.user, req.body.eventId, req.body.rating, req.body.message, function (response) {
								res.json(response);
							});
						}
					}
				}
			}
		},
		// account
		{
			name: "account",
			route: "/account",
			actions: {
				get: {
					index: {
						method: function (req, res) {
							res.send("account controller");
						}
					},
					user: {
						method: function (req, res) {
							res.send(req.session.user);
						}
					},
					logout: {
						method: function (req, res) {
							req.session.destroy(function () {
								res.redirect('/');
							});
						}
					}
				},
				post: {
					authenticate: {
						method: function (req, res) {
							bl.authenticate(req.body.token, req.body.id, function (response) {
								if (response.success) {
									console.log("got user: " + response.body._id);
									req.session.user = response.body;
									res.json(response);
								}
								else {
									res.json(new jsonResponse(false, "Could not login"));
								}
							});
						}
					}
				}
			}
		},
		// map
		{
			name: "map",
			route: "/map",
			actions: {
				get: {
					index: {
						method: function (req, res) {
							res.status(404).send("404 Not Found");
						}
					},
					places: {
						authenticate: true,
						method: function (req, res) {
							bl.placesApiSearch(req.query.key, req.query.lat, req.query.lng, req.query.radius, function (response) {
								res.json(response);
							});
						}
					}
				},
				post: {}
			}
		},
		//places
		{
			name: "places",
			route: "/places",
			actions: {
				get: {
					index: {
						method: function (req, res) {
							res.status(404).send("404 Not Found");
						}
					},
					names: {
						authenticate: true,
						method: function (req, res) {
							bl.placesSearchName(req.query.name, function (response) {
								res.json(response);
							});
						}
					},
					user: {
						authenticate: true,
						method: function (req, res) {
							bl.getUserPlaces(req.session.user._id, function (response) {
								res.json(response);
							});
						}
					}
				},
				post: {
					searchAll: {
						authenticate: true,
						method: function (req, res) {
							bl.placesSearchAll(req.body.key, req.body.lat, req.body.lng, req.body.name, function (response) {
								res.json(response);
							});
						}
					},
					user: {
						authenticate: true,
						method: function (req, res) {
							bl.addPlaceToUser(req.session.user._id, req.body.placeId, function (response) {
								res.json(response);
							});
						}
					},
				}
			}
		},
		// views
		{
			name: "template",
			route: "/template",
			actions: {
				get: {
					index: {
						method: function (req, res) {
							var model = req.query.model;
							if (model) {
								model = JSON.parse(model);
							}
							logJson(model);
							res.render(req.query.template, { model: model });
						}
					}
				}
			}
		}
	];
};

module.exports = ControllerData;