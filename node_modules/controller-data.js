var ControllerData = function (businessLogic) {
	var bl = businessLogic,
		jsonResponse = function (success, body, status) {
			return {
				success: success,
				body: body,
				statusCode: success ? 200 : status
			};
		};

	return [
	// main
		{
			name: "main",
			route: "",
			actions: {
				get: {
					index: {
						method: function (req, res) {
							res.render("index");
						}
					}
				},
				post: {}
			}
		},
	// event
		{
			name: "event",
			route: "/event",
			actions: {
				get: {
					index: {
						authenticate: true,
						method: function (req, res) {
							// get events from mongodb
							bl.getAllEvents(req.session.user._id, function (data) {
								res.json(new jsonResponse(true, data));
							});
						}
					},
					span: {
						authenticate: true,
						method: function (req, res) {
							// get events from mongodb
							bl.getAllEventsForSpan(req.query.span, req.session.user._id, function (data) {
								res.json(new jsonResponse(true, data));
							});
						}
					},
					userEvents: {
						authenticate: true,
						method: function (req, res) {
							// get user events from mongodb
							bl.getUserEvents(req.session.user._id, function (data) {
								res.json(new jsonResponse(true, data));
							});
						}
					},
					create: {
						authenticate: true,
						method: function (req, res) {
							// create
							res.render('create-event', { userId: req.session.user._id });
						}
					},
					insertTestEvents: {
						method: function (req, res) {
							bl.bellinghamEvents(function (doc) {
								res.send(doc);
							});
						}
					}
				},
				post: {
					create: {
						authenticate: true,
						method: function (req, res) {
							req.body.created_by = req.session.user._id;
							req.body.users = new Array();
							req.body.users.push(req.session.user.facebook_id);

							bl.createEvent(req.body, function (response) {
								res.json(new jsonResponse(response.success, response.body));
							});
						}
					},
					addUser: {
						authenticate: true,
						method: function (req, res) {
							if (req.body.eventId) {
								bl.addUserToEvent(req.session.user.facebook_id, req.body.eventId, function (event) {
									console.log(JSON.stringify(event));
									if (event) {
										res.json(new jsonResponse(true, event));
									}
									else {
										res.json(new jsonResponse(false, "Could not add user to event"));
									}
								});
							}
						}
					},
					removeUser: {
						authenticate: true,
						method: function (req, res) {
							if (req.body.eventId) {
								bl.removeUserFromEvent(req.session.user.facebook_id, req.body.eventId, function (event) {
									if (event) {
										res.json(new jsonResponse(true, event));
									}
									else {
										res.json(new jsonResponse(false, "Could not remove user to event"));
									}
								});
							}
						}
					}
				}
			}
		},
	// account
		{
			name: "account",
			route: "/account",
			actions: {
				get: {
					index: {
						method: function (req, res) {
							res.send("account controller");
						}
					},
					user: {
						method: function (req, res) {
							res.send(req.session.user);
						}
					},
					logout: {
						method: function (req, res) {
							req.session.destroy(function () {
								res.redirect('/');
							});
						}
					}
				},
				post: {
					authenticate: {
						method: function (req, res) {
							bl.authenticate(req.body.token, req.body.id, function (response) {
								if (response.success) {
									console.log("got user: " + response.body._id);
									req.session.user = response.body;
									res.json(response);
								}
								else {
									res.json(new jsonResponse(false, "Could not login"));
								}
							});
						}
					}
				}
			}
		},
// map
{
	name: "map",
	route: "/map",
	actions: {
		get: {
			index: {
				method: function (req, res) {
					res.status(404).send("404 Not Found");
				}
			},
			places: {
				authenticate: true,
				method: function (req, res) {
					bl.placesApiSearch(req.query.key, req.query.lat, req.query.lng, req.query.radius, function (response) {
						res.json(response);
					});
				}
			}
		},
		post: {}
	}
},
//places
{
	name: "places",
	route: "/places",
	actions: {
		get: {
			index: {
				method: function (req, res) {
					res.status(404).send("404 Not Found");
				}
			},
			names: {
				authenticate: true,
				method: function (req, res) {
					bl.placesSearchName(req.query.name, function (response) {
						res.json(response);
					});
				}
			},
			user: {
				authenticate: true,
				method: function (req, res) {
					bl.getUserPlaces(req.session.user._id, function (response) {
						res.json(response);
					});
				}
			}
		},
		post: {
			searchAll: {
				authenticate: true,
				method: function (req, res) {
					bl.placesSearchAll(req.body.key, req.body.lat, req.body.lng, req.body.name, function (response) {
						res.json(response);
					});
				}
			},
			user: {
				authenticate: true,
				method: function (req, res) {
					bl.addPlaceToUser(req.session.user._id, req.body.placeId, function (response) {
						res.json(response);
					});
				}
			},
		}
	}
},
// views
{
	name: "template",
	route: "/template",
	actions: {
		get: {
			index: {
				method: function (req, res) {
					res.render(req.query.template);
				}
			}
		}
	}
}
	];
};

module.exports = ControllerData;