var ControllerBundle = function () {
	var obj = this,
		jsonResponse = function (success, body, status) {
			return {
				success: success,
				body: body,
				statusCode: success ? 200 : status
			};
		},
        controllers = new Array(),
		registerController = function (express, controller) {
			console.log("registering controller");
			controller.registerRoute(express, handleRoute);
		},
		// paths
		parsePath = function (path) {
			var pathArray = new Array();
			while (path.indexOf('/') > -1) {
				var path = path.substring(1),
					next = path.indexOf('/');
				if (next > -1) {
					pathArray.push(path.substring(0, next))
					path = path.substring(next);
				}
				else {
					pathArray.push(path);
				}
			}
			return pathArray;
		},
		pathIsDefault = function (pathArray) {
			if (pathArray.length === 0) {
				return true;
			}
			else if (pathArray.length === 1) {
				for (var c in controllers) {
					var cName = controllers[c].getName();
					if (cName === pathArray[0]) {
						return true;
					}
				}
				return false;
			}
			else {
				return false;
			}
		},
		// routes
		handleRoute = function (req, res) {
			// parse url to get action
			console.log("path: " + req.path);

			var actions = this.getActions(),
				pathArray = parsePath(req.path).filter(function (n) { return n != "" }),
				type = req.route.stack[0].method,
				action = pathIsDefault(pathArray) ? "index" : pathArray[pathArray.length - 1],
				actionAuth = actions[type][action].authenticate,
				method = actions[type][action].method,
				ajax = req.xhr || req.headers.accept.indexOf('json') > -1,
				authorized = this.authenticate(req.session.user, this.getAuthLogic());

			//console.log('is ajax? ' + ajax);
			//console.log("type is " + type);
			//console.log("action is " + action);
			//console.log("pathArray: " + JSON.stringify(pathArray));

			if (method) {
				if (authorized && this.authenticate(req.session.user, actionAuth)) {
					method.call(this, req, res);
				}
				else {
					if (ajax) {
						res.json(new jsonResponse(false, "401 Not Authorized", 401));
					}
					else {
						res.status(401).send("401 Not Authorized");
					}					
				}
			}
			else {
				if (ajax) {
					res.json(new jsonResponse(false, "404 Not Found", 404));
				}
				else {
					res.status(404).send("404 Not Found");
				}
			}
		};

	// takes an array of json options, creates controllers
	this.loadControllers = function (express, cData) {
		for (var c in cData) {
			console.log("Loading controller " + cData[c].name);

			var controller = new Controller(cData[c]);
			controllers.push(controller);

			registerController(express, controller);
		}
	};
},
	Controller = function (options) {
		var obj = this,
			route = options.route,
			name = options.name,
			authLogic = options.authenticate,
			actions = options.actions;

		this.getName = function () {
			return name;
		};

		this.getAuthLogic = function () {
			return authLogic;
		}

		this.authenticate = function (user, auth) {
			var authorized = false;
			if (auth !== null && auth !== undefined && auth !== false) {
				if (auth === true && user) {
					authorized = true;
				}
				else {
					var getType = {};
					if (getType.toString.call(auth) === '[object Function]') {
						console.log('Checking authorization...');
						authorized = auth(user);
					}
				}
			}
			else {
				authorized = true;
			}
			return authorized;
		}

		this.getActions = function () {
			return actions;
		};

		this.registerRoute = function (app, handler) {
			app.get(route, function (req, res) {
				handler.call(obj, req, res);
			});
			// register all actions
			//// GET
			for (var action in actions.get) {
				var actionRoute = route + "/" + action;
				console.log("registering GET: " + actionRoute);
				app.get(actionRoute, function (req, res) {
					console.log("calling GET route: " + req.route.path);
					handler.call(obj, req, res);
				});
			}
			//// POST
			for (var action in actions.post) {
				var actionRoute = route + "/" + action;
				console.log("registering POST: " + actionRoute);
				app.post(actionRoute, function (req, res) {
					console.log("calling POST route: " + req.route.path);
					handler.call(obj, req, res);
				});
			}
		};
	};

module.exports = ControllerBundle;